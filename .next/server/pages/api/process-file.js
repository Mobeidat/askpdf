"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/process-file";
exports.ids = ["pages/api/process-file"];
exports.modules = {

/***/ "formidable":
/*!*****************************!*\
  !*** external "formidable" ***!
  \*****************************/
/***/ ((module) => {

module.exports = require("formidable");

/***/ }),

/***/ "mammoth":
/*!**************************!*\
  !*** external "mammoth" ***!
  \**************************/
/***/ ((module) => {

module.exports = require("mammoth");

/***/ }),

/***/ "node-html-markdown":
/*!*************************************!*\
  !*** external "node-html-markdown" ***!
  \*************************************/
/***/ ((module) => {

module.exports = require("node-html-markdown");

/***/ }),

/***/ "openai":
/*!*************************!*\
  !*** external "openai" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("openai");

/***/ }),

/***/ "pdf-parse":
/*!****************************!*\
  !*** external "pdf-parse" ***!
  \****************************/
/***/ ((module) => {

module.exports = require("pdf-parse");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");

/***/ }),

/***/ "(api)/./src/pages/api/process-file.ts":
/*!***************************************!*\
  !*** ./src/pages/api/process-file.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"config\": () => (/* binding */ config),\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var formidable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! formidable */ \"formidable\");\n/* harmony import */ var formidable__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(formidable__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _services_extractTextFromFile__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../services/extractTextFromFile */ \"(api)/./src/services/extractTextFromFile.ts\");\n/* harmony import */ var _services_createEmbeddings__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../services/createEmbeddings */ \"(api)/./src/services/createEmbeddings.ts\");\n // to handle file uploads\n\n\n// Disable the default body parser to handle file uploads\nconst config = {\n    api: {\n        bodyParser: false\n    }\n};\n// This function receives a file as a multipart form and returns the text extracted fom the file and the OpenAI embedding for that text\nasync function handler(req, res) {\n    if (req.method !== \"POST\") {\n        res.status(405).json({\n            error: \"Method not allowed\"\n        });\n        return;\n    }\n    // Create a formidable instance to parse the request as a multipart form\n    const form = new (formidable__WEBPACK_IMPORTED_MODULE_0___default().IncomingForm)();\n    try {\n        const { fields , files  } = await new Promise((resolve, reject)=>{\n            form.parse(req, (err, fields, files)=>{\n                if (err) {\n                    reject(err);\n                } else {\n                    resolve({\n                        fields,\n                        files\n                    });\n                }\n            });\n        });\n        const file = files.file;\n        if (!file || Array.isArray(file) || file.size === 0) {\n            res.status(400).json({\n                error: \"Invalid or missing file\"\n            });\n            return;\n        }\n        const text = await (0,_services_extractTextFromFile__WEBPACK_IMPORTED_MODULE_1__[\"default\"])({\n            filepath: file.filepath,\n            filetype: file.mimetype ?? \"\"\n        });\n        const { meanEmbedding , chunks  } = await (0,_services_createEmbeddings__WEBPACK_IMPORTED_MODULE_2__.createEmbeddings)({\n            text\n        });\n        res.status(200).json({\n            text,\n            meanEmbedding,\n            chunks\n        });\n    } catch (error) {\n        res.status(500).json({\n            error: error.message\n        });\n    } finally{\n        // Always send a response, even if it is empty\n        res.end();\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9zcmMvcGFnZXMvYXBpL3Byb2Nlc3MtZmlsZS50cy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFDdUQsQ0FBQyx5QkFBeUI7QUFHWjtBQUNGO0FBRW5FLHlEQUF5RDtBQUNsRCxNQUFNRyxTQUFTO0lBQUVDLEtBQUs7UUFBRUMsWUFBWSxLQUFLO0lBQUM7QUFBRSxFQUFFO0FBU3JELHVJQUF1STtBQUN4SCxlQUFlQyxRQUM1QkMsR0FBbUIsRUFDbkJDLEdBQTBCLEVBQzFCO0lBQ0EsSUFBSUQsSUFBSUUsTUFBTSxLQUFLLFFBQVE7UUFDekJELElBQUlFLE1BQU0sQ0FBQyxLQUFLQyxJQUFJLENBQUM7WUFBRUMsT0FBTztRQUFxQjtRQUNuRDtJQUNGLENBQUM7SUFFRCx3RUFBd0U7SUFDeEUsTUFBTUMsT0FBTyxJQUFJYixnRUFBdUI7SUFDeEMsSUFBSTtRQUNGLE1BQU0sRUFBRWUsT0FBTSxFQUFFQyxNQUFLLEVBQUUsR0FBRyxNQUFNLElBQUlDLFFBR2pDLENBQUNDLFNBQVNDLFNBQVc7WUFDdEJOLEtBQUtPLEtBQUssQ0FBQ2IsS0FBSyxDQUFDYyxLQUFLTixRQUFRQyxRQUFVO2dCQUN0QyxJQUFJSyxLQUFLO29CQUNQRixPQUFPRTtnQkFDVCxPQUFPO29CQUNMSCxRQUFRO3dCQUFFSDt3QkFBUUM7b0JBQU07Z0JBQzFCLENBQUM7WUFDSDtRQUNGO1FBQ0EsTUFBTU0sT0FBT04sTUFBTU0sSUFBSTtRQUN2QixJQUFJLENBQUNBLFFBQVFDLE1BQU1DLE9BQU8sQ0FBQ0YsU0FBU0EsS0FBS0csSUFBSSxLQUFLLEdBQUc7WUFDbkRqQixJQUFJRSxNQUFNLENBQUMsS0FBS0MsSUFBSSxDQUFDO2dCQUFFQyxPQUFPO1lBQTBCO1lBQ3hEO1FBQ0YsQ0FBQztRQUVELE1BQU1jLE9BQU8sTUFBTXpCLHlFQUFtQkEsQ0FBQztZQUNyQzBCLFVBQVVMLEtBQUtLLFFBQVE7WUFDdkJDLFVBQVVOLEtBQUtPLFFBQVEsSUFBSTtRQUM3QjtRQUVBLE1BQU0sRUFBRUMsY0FBYSxFQUFFQyxPQUFNLEVBQUUsR0FBRyxNQUFNN0IsNEVBQWdCQSxDQUFDO1lBQ3ZEd0I7UUFDRjtRQUVBbEIsSUFBSUUsTUFBTSxDQUFDLEtBQUtDLElBQUksQ0FBQztZQUFFZTtZQUFNSTtZQUFlQztRQUFPO0lBQ3JELEVBQUUsT0FBT25CLE9BQVk7UUFDbkJKLElBQUlFLE1BQU0sQ0FBQyxLQUFLQyxJQUFJLENBQUM7WUFBRUMsT0FBT0EsTUFBTW9CLE9BQU87UUFBQztJQUM5QyxTQUFVO1FBQ1IsOENBQThDO1FBQzlDeEIsSUFBSXlCLEdBQUc7SUFDVDtBQUNGLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9maWxlLXEtYW5kLWEvLi9zcmMvcGFnZXMvYXBpL3Byb2Nlc3MtZmlsZS50cz85MmFmIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgTmV4dEFwaVJlcXVlc3QsIE5leHRBcGlSZXNwb25zZSB9IGZyb20gXCJuZXh0XCI7XG5pbXBvcnQgZm9ybWlkYWJsZSwgeyBGaWVsZHMsIEZpbGVzIH0gZnJvbSBcImZvcm1pZGFibGVcIjsgLy8gdG8gaGFuZGxlIGZpbGUgdXBsb2Fkc1xuXG5pbXBvcnQgeyBUZXh0RW1iZWRkaW5nIH0gZnJvbSBcIi4uLy4uL3R5cGVzL2ZpbGVcIjtcbmltcG9ydCBleHRyYWN0VGV4dEZyb21GaWxlIGZyb20gXCIuLi8uLi9zZXJ2aWNlcy9leHRyYWN0VGV4dEZyb21GaWxlXCI7XG5pbXBvcnQgeyBjcmVhdGVFbWJlZGRpbmdzIH0gZnJvbSBcIi4uLy4uL3NlcnZpY2VzL2NyZWF0ZUVtYmVkZGluZ3NcIjtcblxuLy8gRGlzYWJsZSB0aGUgZGVmYXVsdCBib2R5IHBhcnNlciB0byBoYW5kbGUgZmlsZSB1cGxvYWRzXG5leHBvcnQgY29uc3QgY29uZmlnID0geyBhcGk6IHsgYm9keVBhcnNlcjogZmFsc2UgfSB9O1xuXG50eXBlIERhdGEgPSB7XG4gIHRleHQ/OiBzdHJpbmc7XG4gIG1lYW5FbWJlZGRpbmc/OiBudW1iZXJbXTtcbiAgY2h1bmtzPzogVGV4dEVtYmVkZGluZ1tdO1xuICBlcnJvcj86IHN0cmluZztcbn07XG5cbi8vIFRoaXMgZnVuY3Rpb24gcmVjZWl2ZXMgYSBmaWxlIGFzIGEgbXVsdGlwYXJ0IGZvcm0gYW5kIHJldHVybnMgdGhlIHRleHQgZXh0cmFjdGVkIGZvbSB0aGUgZmlsZSBhbmQgdGhlIE9wZW5BSSBlbWJlZGRpbmcgZm9yIHRoYXQgdGV4dFxuZXhwb3J0IGRlZmF1bHQgYXN5bmMgZnVuY3Rpb24gaGFuZGxlcihcbiAgcmVxOiBOZXh0QXBpUmVxdWVzdCxcbiAgcmVzOiBOZXh0QXBpUmVzcG9uc2U8RGF0YT5cbikge1xuICBpZiAocmVxLm1ldGhvZCAhPT0gXCJQT1NUXCIpIHtcbiAgICByZXMuc3RhdHVzKDQwNSkuanNvbih7IGVycm9yOiBcIk1ldGhvZCBub3QgYWxsb3dlZFwiIH0pO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIENyZWF0ZSBhIGZvcm1pZGFibGUgaW5zdGFuY2UgdG8gcGFyc2UgdGhlIHJlcXVlc3QgYXMgYSBtdWx0aXBhcnQgZm9ybVxuICBjb25zdCBmb3JtID0gbmV3IGZvcm1pZGFibGUuSW5jb21pbmdGb3JtKCk7XG4gIHRyeSB7XG4gICAgY29uc3QgeyBmaWVsZHMsIGZpbGVzIH0gPSBhd2FpdCBuZXcgUHJvbWlzZTx7XG4gICAgICBmaWVsZHM6IEZpZWxkcztcbiAgICAgIGZpbGVzOiBGaWxlcztcbiAgICB9PigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBmb3JtLnBhcnNlKHJlcSwgKGVyciwgZmllbGRzLCBmaWxlcykgPT4ge1xuICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzb2x2ZSh7IGZpZWxkcywgZmlsZXMgfSBhcyB7IGZpZWxkczogRmllbGRzOyBmaWxlczogRmlsZXMgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIGNvbnN0IGZpbGUgPSBmaWxlcy5maWxlO1xuICAgIGlmICghZmlsZSB8fCBBcnJheS5pc0FycmF5KGZpbGUpIHx8IGZpbGUuc2l6ZSA9PT0gMCkge1xuICAgICAgcmVzLnN0YXR1cyg0MDApLmpzb24oeyBlcnJvcjogXCJJbnZhbGlkIG9yIG1pc3NpbmcgZmlsZVwiIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IHRleHQgPSBhd2FpdCBleHRyYWN0VGV4dEZyb21GaWxlKHtcbiAgICAgIGZpbGVwYXRoOiBmaWxlLmZpbGVwYXRoLFxuICAgICAgZmlsZXR5cGU6IGZpbGUubWltZXR5cGUgPz8gXCJcIixcbiAgICB9KTtcblxuICAgIGNvbnN0IHsgbWVhbkVtYmVkZGluZywgY2h1bmtzIH0gPSBhd2FpdCBjcmVhdGVFbWJlZGRpbmdzKHtcbiAgICAgIHRleHQsXG4gICAgfSk7XG5cbiAgICByZXMuc3RhdHVzKDIwMCkuanNvbih7IHRleHQsIG1lYW5FbWJlZGRpbmcsIGNodW5rcyB9KTtcbiAgfSBjYXRjaCAoZXJyb3I6IGFueSkge1xuICAgIHJlcy5zdGF0dXMoNTAwKS5qc29uKHsgZXJyb3I6IGVycm9yLm1lc3NhZ2UgfSk7XG4gIH0gZmluYWxseSB7XG4gICAgLy8gQWx3YXlzIHNlbmQgYSByZXNwb25zZSwgZXZlbiBpZiBpdCBpcyBlbXB0eVxuICAgIHJlcy5lbmQoKTtcbiAgfVxufVxuIl0sIm5hbWVzIjpbImZvcm1pZGFibGUiLCJleHRyYWN0VGV4dEZyb21GaWxlIiwiY3JlYXRlRW1iZWRkaW5ncyIsImNvbmZpZyIsImFwaSIsImJvZHlQYXJzZXIiLCJoYW5kbGVyIiwicmVxIiwicmVzIiwibWV0aG9kIiwic3RhdHVzIiwianNvbiIsImVycm9yIiwiZm9ybSIsIkluY29taW5nRm9ybSIsImZpZWxkcyIsImZpbGVzIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJwYXJzZSIsImVyciIsImZpbGUiLCJBcnJheSIsImlzQXJyYXkiLCJzaXplIiwidGV4dCIsImZpbGVwYXRoIiwiZmlsZXR5cGUiLCJtaW1ldHlwZSIsIm1lYW5FbWJlZGRpbmciLCJjaHVua3MiLCJtZXNzYWdlIiwiZW5kIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api)/./src/pages/api/process-file.ts\n");

/***/ }),

/***/ "(api)/./src/services/chunkText.ts":
/*!***********************************!*\
  !*** ./src/services/chunkText.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"chunkText\": () => (/* binding */ chunkText)\n/* harmony export */ });\n// A function that splits a text into smaller pieces of roughly equal length\n// The pieces are delimited by sentences and try to avoid breaking words or punctuation\n// This can be useful for processing long texts with natural language models that have a limited input size\nfunction chunkText({ text , // The desired maximum length of each piece in characters\n// This uses 4 characters as an approximation of the average token length\n// since there isn't a good JS tokenizer at the moment\nmaxCharLength =250 * 4  }) {\n    // Create an empty array to store the pieces\n    const chunks = [];\n    // Create a variable to hold the current piece\n    let currentChunk = \"\";\n    // Remove any newline characters from the text and split it by periods\n    // This assumes that periods mark the end of sentences, which may not be true for some languages\n    const sentences = text.replace(/\\n/g, \" \").split(/([.])/);\n    for (const sentence of sentences){\n        // Remove any extra whitespace from the beginning and end of the sentence\n        const trimmedSentence = sentence.trim();\n        // If the sentence is empty, skip it\n        if (!trimmedSentence) continue;\n        // Check if adding the sentence to the current piece would make it too long, too short, or just right\n        // This uses a tolerance range of 50% of the maximum length to allow some flexibility\n        // If the piece is too long, save it and start a new one\n        // If the piece is too short, add the sentence and continue\n        // If the piece is just right, save it and start a new one\n        const chunkLength = currentChunk.length + trimmedSentence.length + 1;\n        const lowerBound = maxCharLength - maxCharLength * 0.5;\n        const upperBound = maxCharLength + maxCharLength * 0.5;\n        if (chunkLength >= lowerBound && chunkLength <= upperBound && currentChunk) {\n            // The piece is just right, so we save it and start a new one\n            // We remove any periods or spaces from the beginning of the piece and trim any whitespace\n            currentChunk = currentChunk.replace(/^[. ]+/, \"\").trim();\n            // We only push the piece if it is not empty\n            if (currentChunk) chunks.push(currentChunk);\n            // Reset the current piece\n            currentChunk = \"\";\n        } else if (chunkLength > upperBound) {\n            // The piece is too long, so save it and start a new one with the sentence\n            // Remove any periods or spaces from the beginning of the piece and trim any whitespace\n            currentChunk = currentChunk.replace(/^[. ]+/, \"\").trim();\n            // We only push the piece if it is not empty\n            if (currentChunk) chunks.push(currentChunk);\n            // Set the current piece to the sentence\n            currentChunk = trimmedSentence;\n        } else {\n            // The piece is too short, so add the sentence and continue\n            // Add a space before the sentence unless it is a period\n            currentChunk += `${trimmedSentence === \".\" ? \"\" : \" \"}${trimmedSentence}`;\n        }\n    }\n    // If there is any remaining piece, save it\n    if (currentChunk) {\n        chunks.push(currentChunk);\n    }\n    // Return the array of pieces\n    return chunks;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9zcmMvc2VydmljZXMvY2h1bmtUZXh0LnRzLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSw0RUFBNEU7QUFDNUUsdUZBQXVGO0FBQ3ZGLDJHQUEyRztBQUNwRyxTQUFTQSxVQUFVLEVBQ3hCQyxLQUFJLEVBQ0oseURBQXlEO0FBQ3pELHlFQUF5RTtBQUN6RSxzREFBc0Q7QUFDdERDLGVBQWdCLE1BQU0sRUFBQyxFQUl4QixFQUFZO0lBQ1gsNENBQTRDO0lBQzVDLE1BQU1DLFNBQW1CLEVBQUU7SUFFM0IsOENBQThDO0lBQzlDLElBQUlDLGVBQWU7SUFFbkIsc0VBQXNFO0lBQ3RFLGdHQUFnRztJQUNoRyxNQUFNQyxZQUFZSixLQUFLSyxPQUFPLENBQUMsT0FBTyxLQUFLQyxLQUFLLENBQUM7SUFFakQsS0FBSyxNQUFNQyxZQUFZSCxVQUFXO1FBQ2hDLHlFQUF5RTtRQUN6RSxNQUFNSSxrQkFBa0JELFNBQVNFLElBQUk7UUFFckMsb0NBQW9DO1FBQ3BDLElBQUksQ0FBQ0QsaUJBQWlCLFFBQVM7UUFFL0IscUdBQXFHO1FBQ3JHLHFGQUFxRjtRQUNyRix3REFBd0Q7UUFDeEQsMkRBQTJEO1FBQzNELDBEQUEwRDtRQUMxRCxNQUFNRSxjQUFjUCxhQUFhUSxNQUFNLEdBQUdILGdCQUFnQkcsTUFBTSxHQUFHO1FBQ25FLE1BQU1DLGFBQWFYLGdCQUFnQkEsZ0JBQWdCO1FBQ25ELE1BQU1ZLGFBQWFaLGdCQUFnQkEsZ0JBQWdCO1FBRW5ELElBQ0VTLGVBQWVFLGNBQ2ZGLGVBQWVHLGNBQ2ZWLGNBQ0E7WUFDQSw2REFBNkQ7WUFDN0QsMEZBQTBGO1lBQzFGQSxlQUFlQSxhQUFhRSxPQUFPLENBQUMsVUFBVSxJQUFJSSxJQUFJO1lBQ3RELDRDQUE0QztZQUM1QyxJQUFJTixjQUFjRCxPQUFPWSxJQUFJLENBQUNYO1lBQzlCLDBCQUEwQjtZQUMxQkEsZUFBZTtRQUNqQixPQUFPLElBQUlPLGNBQWNHLFlBQVk7WUFDbkMsMEVBQTBFO1lBQzFFLHVGQUF1RjtZQUN2RlYsZUFBZUEsYUFBYUUsT0FBTyxDQUFDLFVBQVUsSUFBSUksSUFBSTtZQUN0RCw0Q0FBNEM7WUFDNUMsSUFBSU4sY0FBY0QsT0FBT1ksSUFBSSxDQUFDWDtZQUM5Qix3Q0FBd0M7WUFDeENBLGVBQWVLO1FBQ2pCLE9BQU87WUFDTCwyREFBMkQ7WUFDM0Qsd0RBQXdEO1lBQ3hETCxnQkFBZ0IsQ0FBQyxFQUFFSyxvQkFBb0IsTUFBTSxLQUFLLEdBQUcsQ0FBQyxFQUFFQSxnQkFBZ0IsQ0FBQztRQUMzRSxDQUFDO0lBQ0g7SUFFQSwyQ0FBMkM7SUFDM0MsSUFBSUwsY0FBYztRQUNoQkQsT0FBT1ksSUFBSSxDQUFDWDtJQUNkLENBQUM7SUFFRCw2QkFBNkI7SUFDN0IsT0FBT0Q7QUFDVCxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZmlsZS1xLWFuZC1hLy4vc3JjL3NlcnZpY2VzL2NodW5rVGV4dC50cz8yNTI1Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIEEgZnVuY3Rpb24gdGhhdCBzcGxpdHMgYSB0ZXh0IGludG8gc21hbGxlciBwaWVjZXMgb2Ygcm91Z2hseSBlcXVhbCBsZW5ndGhcbi8vIFRoZSBwaWVjZXMgYXJlIGRlbGltaXRlZCBieSBzZW50ZW5jZXMgYW5kIHRyeSB0byBhdm9pZCBicmVha2luZyB3b3JkcyBvciBwdW5jdHVhdGlvblxuLy8gVGhpcyBjYW4gYmUgdXNlZnVsIGZvciBwcm9jZXNzaW5nIGxvbmcgdGV4dHMgd2l0aCBuYXR1cmFsIGxhbmd1YWdlIG1vZGVscyB0aGF0IGhhdmUgYSBsaW1pdGVkIGlucHV0IHNpemVcbmV4cG9ydCBmdW5jdGlvbiBjaHVua1RleHQoe1xuICB0ZXh0LCAvLyBUaGUgaW5wdXQgdGV4dCB0byBiZSBzcGxpdFxuICAvLyBUaGUgZGVzaXJlZCBtYXhpbXVtIGxlbmd0aCBvZiBlYWNoIHBpZWNlIGluIGNoYXJhY3RlcnNcbiAgLy8gVGhpcyB1c2VzIDQgY2hhcmFjdGVycyBhcyBhbiBhcHByb3hpbWF0aW9uIG9mIHRoZSBhdmVyYWdlIHRva2VuIGxlbmd0aFxuICAvLyBzaW5jZSB0aGVyZSBpc24ndCBhIGdvb2QgSlMgdG9rZW5pemVyIGF0IHRoZSBtb21lbnRcbiAgbWF4Q2hhckxlbmd0aCA9IDI1MCAqIDQsXG59OiB7XG4gIHRleHQ6IHN0cmluZztcbiAgbWF4Q2hhckxlbmd0aD86IG51bWJlcjtcbn0pOiBzdHJpbmdbXSB7XG4gIC8vIENyZWF0ZSBhbiBlbXB0eSBhcnJheSB0byBzdG9yZSB0aGUgcGllY2VzXG4gIGNvbnN0IGNodW5rczogc3RyaW5nW10gPSBbXTtcblxuICAvLyBDcmVhdGUgYSB2YXJpYWJsZSB0byBob2xkIHRoZSBjdXJyZW50IHBpZWNlXG4gIGxldCBjdXJyZW50Q2h1bmsgPSBcIlwiO1xuXG4gIC8vIFJlbW92ZSBhbnkgbmV3bGluZSBjaGFyYWN0ZXJzIGZyb20gdGhlIHRleHQgYW5kIHNwbGl0IGl0IGJ5IHBlcmlvZHNcbiAgLy8gVGhpcyBhc3N1bWVzIHRoYXQgcGVyaW9kcyBtYXJrIHRoZSBlbmQgb2Ygc2VudGVuY2VzLCB3aGljaCBtYXkgbm90IGJlIHRydWUgZm9yIHNvbWUgbGFuZ3VhZ2VzXG4gIGNvbnN0IHNlbnRlbmNlcyA9IHRleHQucmVwbGFjZSgvXFxuL2csIFwiIFwiKS5zcGxpdCgvKFsuXSkvKTtcblxuICBmb3IgKGNvbnN0IHNlbnRlbmNlIG9mIHNlbnRlbmNlcykge1xuICAgIC8vIFJlbW92ZSBhbnkgZXh0cmEgd2hpdGVzcGFjZSBmcm9tIHRoZSBiZWdpbm5pbmcgYW5kIGVuZCBvZiB0aGUgc2VudGVuY2VcbiAgICBjb25zdCB0cmltbWVkU2VudGVuY2UgPSBzZW50ZW5jZS50cmltKCk7XG5cbiAgICAvLyBJZiB0aGUgc2VudGVuY2UgaXMgZW1wdHksIHNraXAgaXRcbiAgICBpZiAoIXRyaW1tZWRTZW50ZW5jZSkgY29udGludWU7XG5cbiAgICAvLyBDaGVjayBpZiBhZGRpbmcgdGhlIHNlbnRlbmNlIHRvIHRoZSBjdXJyZW50IHBpZWNlIHdvdWxkIG1ha2UgaXQgdG9vIGxvbmcsIHRvbyBzaG9ydCwgb3IganVzdCByaWdodFxuICAgIC8vIFRoaXMgdXNlcyBhIHRvbGVyYW5jZSByYW5nZSBvZiA1MCUgb2YgdGhlIG1heGltdW0gbGVuZ3RoIHRvIGFsbG93IHNvbWUgZmxleGliaWxpdHlcbiAgICAvLyBJZiB0aGUgcGllY2UgaXMgdG9vIGxvbmcsIHNhdmUgaXQgYW5kIHN0YXJ0IGEgbmV3IG9uZVxuICAgIC8vIElmIHRoZSBwaWVjZSBpcyB0b28gc2hvcnQsIGFkZCB0aGUgc2VudGVuY2UgYW5kIGNvbnRpbnVlXG4gICAgLy8gSWYgdGhlIHBpZWNlIGlzIGp1c3QgcmlnaHQsIHNhdmUgaXQgYW5kIHN0YXJ0IGEgbmV3IG9uZVxuICAgIGNvbnN0IGNodW5rTGVuZ3RoID0gY3VycmVudENodW5rLmxlbmd0aCArIHRyaW1tZWRTZW50ZW5jZS5sZW5ndGggKyAxO1xuICAgIGNvbnN0IGxvd2VyQm91bmQgPSBtYXhDaGFyTGVuZ3RoIC0gbWF4Q2hhckxlbmd0aCAqIDAuNTtcbiAgICBjb25zdCB1cHBlckJvdW5kID0gbWF4Q2hhckxlbmd0aCArIG1heENoYXJMZW5ndGggKiAwLjU7XG5cbiAgICBpZiAoXG4gICAgICBjaHVua0xlbmd0aCA+PSBsb3dlckJvdW5kICYmXG4gICAgICBjaHVua0xlbmd0aCA8PSB1cHBlckJvdW5kICYmXG4gICAgICBjdXJyZW50Q2h1bmtcbiAgICApIHtcbiAgICAgIC8vIFRoZSBwaWVjZSBpcyBqdXN0IHJpZ2h0LCBzbyB3ZSBzYXZlIGl0IGFuZCBzdGFydCBhIG5ldyBvbmVcbiAgICAgIC8vIFdlIHJlbW92ZSBhbnkgcGVyaW9kcyBvciBzcGFjZXMgZnJvbSB0aGUgYmVnaW5uaW5nIG9mIHRoZSBwaWVjZSBhbmQgdHJpbSBhbnkgd2hpdGVzcGFjZVxuICAgICAgY3VycmVudENodW5rID0gY3VycmVudENodW5rLnJlcGxhY2UoL15bLiBdKy8sIFwiXCIpLnRyaW0oKTtcbiAgICAgIC8vIFdlIG9ubHkgcHVzaCB0aGUgcGllY2UgaWYgaXQgaXMgbm90IGVtcHR5XG4gICAgICBpZiAoY3VycmVudENodW5rKSBjaHVua3MucHVzaChjdXJyZW50Q2h1bmspO1xuICAgICAgLy8gUmVzZXQgdGhlIGN1cnJlbnQgcGllY2VcbiAgICAgIGN1cnJlbnRDaHVuayA9IFwiXCI7XG4gICAgfSBlbHNlIGlmIChjaHVua0xlbmd0aCA+IHVwcGVyQm91bmQpIHtcbiAgICAgIC8vIFRoZSBwaWVjZSBpcyB0b28gbG9uZywgc28gc2F2ZSBpdCBhbmQgc3RhcnQgYSBuZXcgb25lIHdpdGggdGhlIHNlbnRlbmNlXG4gICAgICAvLyBSZW1vdmUgYW55IHBlcmlvZHMgb3Igc3BhY2VzIGZyb20gdGhlIGJlZ2lubmluZyBvZiB0aGUgcGllY2UgYW5kIHRyaW0gYW55IHdoaXRlc3BhY2VcbiAgICAgIGN1cnJlbnRDaHVuayA9IGN1cnJlbnRDaHVuay5yZXBsYWNlKC9eWy4gXSsvLCBcIlwiKS50cmltKCk7XG4gICAgICAvLyBXZSBvbmx5IHB1c2ggdGhlIHBpZWNlIGlmIGl0IGlzIG5vdCBlbXB0eVxuICAgICAgaWYgKGN1cnJlbnRDaHVuaykgY2h1bmtzLnB1c2goY3VycmVudENodW5rKTtcbiAgICAgIC8vIFNldCB0aGUgY3VycmVudCBwaWVjZSB0byB0aGUgc2VudGVuY2VcbiAgICAgIGN1cnJlbnRDaHVuayA9IHRyaW1tZWRTZW50ZW5jZTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gVGhlIHBpZWNlIGlzIHRvbyBzaG9ydCwgc28gYWRkIHRoZSBzZW50ZW5jZSBhbmQgY29udGludWVcbiAgICAgIC8vIEFkZCBhIHNwYWNlIGJlZm9yZSB0aGUgc2VudGVuY2UgdW5sZXNzIGl0IGlzIGEgcGVyaW9kXG4gICAgICBjdXJyZW50Q2h1bmsgKz0gYCR7dHJpbW1lZFNlbnRlbmNlID09PSBcIi5cIiA/IFwiXCIgOiBcIiBcIn0ke3RyaW1tZWRTZW50ZW5jZX1gO1xuICAgIH1cbiAgfVxuXG4gIC8vIElmIHRoZXJlIGlzIGFueSByZW1haW5pbmcgcGllY2UsIHNhdmUgaXRcbiAgaWYgKGN1cnJlbnRDaHVuaykge1xuICAgIGNodW5rcy5wdXNoKGN1cnJlbnRDaHVuayk7XG4gIH1cblxuICAvLyBSZXR1cm4gdGhlIGFycmF5IG9mIHBpZWNlc1xuICByZXR1cm4gY2h1bmtzO1xufVxuIl0sIm5hbWVzIjpbImNodW5rVGV4dCIsInRleHQiLCJtYXhDaGFyTGVuZ3RoIiwiY2h1bmtzIiwiY3VycmVudENodW5rIiwic2VudGVuY2VzIiwicmVwbGFjZSIsInNwbGl0Iiwic2VudGVuY2UiLCJ0cmltbWVkU2VudGVuY2UiLCJ0cmltIiwiY2h1bmtMZW5ndGgiLCJsZW5ndGgiLCJsb3dlckJvdW5kIiwidXBwZXJCb3VuZCIsInB1c2giXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/./src/services/chunkText.ts\n");

/***/ }),

/***/ "(api)/./src/services/createEmbeddings.ts":
/*!******************************************!*\
  !*** ./src/services/createEmbeddings.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"createEmbeddings\": () => (/* binding */ createEmbeddings)\n/* harmony export */ });\n/* harmony import */ var _getEmbeddingsForText__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getEmbeddingsForText */ \"(api)/./src/services/getEmbeddingsForText.ts\");\n\nasync function createEmbeddings({ text , maxCharLength  }) {\n    try {\n        const textEmbeddings = await (0,_getEmbeddingsForText__WEBPACK_IMPORTED_MODULE_0__.getEmbeddingsForText)({\n            text,\n            maxCharLength\n        });\n        // If there are 0 or 1 embeddings, the mean embedding is the same as the embedding\n        if (textEmbeddings.length <= 1) {\n            return {\n                meanEmbedding: textEmbeddings[0]?.embedding ?? [],\n                chunks: textEmbeddings\n            };\n        }\n        // If there are multiple embeddings, calculate their average\n        const embeddingLength = textEmbeddings[0].embedding.length;\n        const meanEmbedding = [];\n        for(let i = 0; i < embeddingLength; i++){\n            // Sum up the values at the same index of each embedding\n            let sum = 0;\n            for (const textEmbedding of textEmbeddings){\n                sum += textEmbedding.embedding[i];\n            }\n            // Divide by the number of embeddings to get the mean\n            meanEmbedding.push(sum / textEmbeddings.length);\n        }\n        return {\n            meanEmbedding,\n            chunks: textEmbeddings\n        };\n    } catch (error) {\n        console.log(\"Error: \", error);\n        return {\n            meanEmbedding: [],\n            chunks: []\n        };\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9zcmMvc2VydmljZXMvY3JlYXRlRW1iZWRkaW5ncy50cy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUM4RDtBQU92RCxlQUFlQyxpQkFBaUIsRUFDckNDLEtBQUksRUFDSkMsY0FBYSxFQUlkLEVBQXVCO0lBQ3RCLElBQUk7UUFDRixNQUFNQyxpQkFBaUIsTUFBTUosMkVBQW9CQSxDQUFDO1lBQ2hERTtZQUNBQztRQUNGO1FBRUEsa0ZBQWtGO1FBQ2xGLElBQUlDLGVBQWVDLE1BQU0sSUFBSSxHQUFHO1lBQzlCLE9BQU87Z0JBQ0xDLGVBQWVGLGNBQWMsQ0FBQyxFQUFFLEVBQUVHLGFBQWEsRUFBRTtnQkFDakRDLFFBQVFKO1lBQ1Y7UUFDRixDQUFDO1FBRUQsNERBQTREO1FBQzVELE1BQU1LLGtCQUFrQkwsY0FBYyxDQUFDLEVBQUUsQ0FBQ0csU0FBUyxDQUFDRixNQUFNO1FBQzFELE1BQU1DLGdCQUFnQixFQUFFO1FBQ3hCLElBQUssSUFBSUksSUFBSSxHQUFHQSxJQUFJRCxpQkFBaUJDLElBQUs7WUFDeEMsd0RBQXdEO1lBQ3hELElBQUlDLE1BQU07WUFDVixLQUFLLE1BQU1DLGlCQUFpQlIsZUFBZ0I7Z0JBQzFDTyxPQUFPQyxjQUFjTCxTQUFTLENBQUNHLEVBQUU7WUFDbkM7WUFDQSxxREFBcUQ7WUFDckRKLGNBQWNPLElBQUksQ0FBQ0YsTUFBTVAsZUFBZUMsTUFBTTtRQUNoRDtRQUVBLE9BQU87WUFDTEM7WUFDQUUsUUFBUUo7UUFDVjtJQUNGLEVBQUUsT0FBT1UsT0FBWTtRQUNuQkMsUUFBUUMsR0FBRyxDQUFDLFdBQVdGO1FBQ3ZCLE9BQU87WUFDTFIsZUFBZSxFQUFFO1lBQ2pCRSxRQUFRLEVBQUU7UUFDWjtJQUNGO0FBQ0YsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2ZpbGUtcS1hbmQtYS8uL3NyYy9zZXJ2aWNlcy9jcmVhdGVFbWJlZGRpbmdzLnRzPzhiOWUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVGV4dEVtYmVkZGluZyB9IGZyb20gXCIuLi90eXBlcy9maWxlXCI7XG5pbXBvcnQgeyBnZXRFbWJlZGRpbmdzRm9yVGV4dCB9IGZyb20gXCIuL2dldEVtYmVkZGluZ3NGb3JUZXh0XCI7XG5cbmV4cG9ydCB0eXBlIEVtYmVkZGluZ3MgPSB7XG4gIG1lYW5FbWJlZGRpbmc6IG51bWJlcltdO1xuICBjaHVua3M6IFRleHRFbWJlZGRpbmdbXTtcbn07XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjcmVhdGVFbWJlZGRpbmdzKHtcbiAgdGV4dCxcbiAgbWF4Q2hhckxlbmd0aCxcbn06IHtcbiAgdGV4dDogc3RyaW5nO1xuICBtYXhDaGFyTGVuZ3RoPzogbnVtYmVyO1xufSk6IFByb21pc2U8RW1iZWRkaW5ncz4ge1xuICB0cnkge1xuICAgIGNvbnN0IHRleHRFbWJlZGRpbmdzID0gYXdhaXQgZ2V0RW1iZWRkaW5nc0ZvclRleHQoe1xuICAgICAgdGV4dCxcbiAgICAgIG1heENoYXJMZW5ndGgsXG4gICAgfSk7XG5cbiAgICAvLyBJZiB0aGVyZSBhcmUgMCBvciAxIGVtYmVkZGluZ3MsIHRoZSBtZWFuIGVtYmVkZGluZyBpcyB0aGUgc2FtZSBhcyB0aGUgZW1iZWRkaW5nXG4gICAgaWYgKHRleHRFbWJlZGRpbmdzLmxlbmd0aCA8PSAxKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBtZWFuRW1iZWRkaW5nOiB0ZXh0RW1iZWRkaW5nc1swXT8uZW1iZWRkaW5nID8/IFtdLFxuICAgICAgICBjaHVua3M6IHRleHRFbWJlZGRpbmdzLFxuICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBJZiB0aGVyZSBhcmUgbXVsdGlwbGUgZW1iZWRkaW5ncywgY2FsY3VsYXRlIHRoZWlyIGF2ZXJhZ2VcbiAgICBjb25zdCBlbWJlZGRpbmdMZW5ndGggPSB0ZXh0RW1iZWRkaW5nc1swXS5lbWJlZGRpbmcubGVuZ3RoO1xuICAgIGNvbnN0IG1lYW5FbWJlZGRpbmcgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGVtYmVkZGluZ0xlbmd0aDsgaSsrKSB7XG4gICAgICAvLyBTdW0gdXAgdGhlIHZhbHVlcyBhdCB0aGUgc2FtZSBpbmRleCBvZiBlYWNoIGVtYmVkZGluZ1xuICAgICAgbGV0IHN1bSA9IDA7XG4gICAgICBmb3IgKGNvbnN0IHRleHRFbWJlZGRpbmcgb2YgdGV4dEVtYmVkZGluZ3MpIHtcbiAgICAgICAgc3VtICs9IHRleHRFbWJlZGRpbmcuZW1iZWRkaW5nW2ldO1xuICAgICAgfVxuICAgICAgLy8gRGl2aWRlIGJ5IHRoZSBudW1iZXIgb2YgZW1iZWRkaW5ncyB0byBnZXQgdGhlIG1lYW5cbiAgICAgIG1lYW5FbWJlZGRpbmcucHVzaChzdW0gLyB0ZXh0RW1iZWRkaW5ncy5sZW5ndGgpO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBtZWFuRW1iZWRkaW5nLFxuICAgICAgY2h1bmtzOiB0ZXh0RW1iZWRkaW5ncyxcbiAgICB9O1xuICB9IGNhdGNoIChlcnJvcjogYW55KSB7XG4gICAgY29uc29sZS5sb2coXCJFcnJvcjogXCIsIGVycm9yKTtcbiAgICByZXR1cm4ge1xuICAgICAgbWVhbkVtYmVkZGluZzogW10sXG4gICAgICBjaHVua3M6IFtdLFxuICAgIH07XG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJnZXRFbWJlZGRpbmdzRm9yVGV4dCIsImNyZWF0ZUVtYmVkZGluZ3MiLCJ0ZXh0IiwibWF4Q2hhckxlbmd0aCIsInRleHRFbWJlZGRpbmdzIiwibGVuZ3RoIiwibWVhbkVtYmVkZGluZyIsImVtYmVkZGluZyIsImNodW5rcyIsImVtYmVkZGluZ0xlbmd0aCIsImkiLCJzdW0iLCJ0ZXh0RW1iZWRkaW5nIiwicHVzaCIsImVycm9yIiwiY29uc29sZSIsImxvZyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./src/services/createEmbeddings.ts\n");

/***/ }),

/***/ "(api)/./src/services/extractTextFromFile.ts":
/*!*********************************************!*\
  !*** ./src/services/extractTextFromFile.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ extractTextFromFile)\n/* harmony export */ });\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var mammoth__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! mammoth */ \"mammoth\");\n/* harmony import */ var mammoth__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(mammoth__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var pdf_parse__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! pdf-parse */ \"pdf-parse\");\n/* harmony import */ var pdf_parse__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(pdf_parse__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var node_html_markdown__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! node-html-markdown */ \"node-html-markdown\");\n/* harmony import */ var node_html_markdown__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(node_html_markdown__WEBPACK_IMPORTED_MODULE_3__);\n\n\n\n\nasync function extractTextFromFile({ filepath , filetype  }) {\n    const buffer = await new Promise((resolve, reject)=>{\n        const fileStream = fs__WEBPACK_IMPORTED_MODULE_0___default().createReadStream(filepath);\n        const chunks = [];\n        fileStream.on(\"data\", (chunk)=>{\n            chunks.push(chunk);\n        });\n        fileStream.on(\"error\", (error)=>{\n            reject(error);\n        });\n        fileStream.on(\"end\", ()=>{\n            resolve(Buffer.concat(chunks));\n        });\n    });\n    // Handle different file types using different modules\n    switch(filetype){\n        case \"application/pdf\":\n            const pdfData = await pdf_parse__WEBPACK_IMPORTED_MODULE_2___default()(buffer);\n            return pdfData.text;\n        case \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\":\n            const docxResult = await mammoth__WEBPACK_IMPORTED_MODULE_1___default().extractRawText({\n                path: filepath\n            });\n            return docxResult.value;\n        case \"text/markdown\":\n        case \"text/csv\":\n        case \"text/html\":\n            const html = buffer.toString();\n            return node_html_markdown__WEBPACK_IMPORTED_MODULE_3__.NodeHtmlMarkdown.translate(html);\n        case \"text/plain\":\n            return buffer.toString();\n        default:\n            throw new Error(\"Unsupported file type\");\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9zcmMvc2VydmljZXMvZXh0cmFjdFRleHRGcm9tRmlsZS50cy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBb0I7QUFDVTtBQUNHO0FBQ3FCO0FBRXZDLGVBQWVJLG9CQUFvQixFQUNoREMsU0FBUSxFQUNSQyxTQUFRLEVBSVQsRUFBbUI7SUFDbEIsTUFBTUMsU0FBaUIsTUFBTSxJQUFJQyxRQUFRLENBQUNDLFNBQVNDLFNBQVc7UUFDNUQsTUFBTUMsYUFBYVgsMERBQW1CLENBQUNLO1FBQ3ZDLE1BQU1RLFNBQWdCLEVBQUU7UUFDeEJGLFdBQVdHLEVBQUUsQ0FBQyxRQUFRLENBQUNDLFFBQVU7WUFDL0JGLE9BQU9HLElBQUksQ0FBQ0Q7UUFDZDtRQUNBSixXQUFXRyxFQUFFLENBQUMsU0FBUyxDQUFDRyxRQUFVO1lBQ2hDUCxPQUFPTztRQUNUO1FBQ0FOLFdBQVdHLEVBQUUsQ0FBQyxPQUFPLElBQU07WUFDekJMLFFBQVFTLE9BQU9DLE1BQU0sQ0FBQ047UUFDeEI7SUFDRjtJQUVBLHNEQUFzRDtJQUN0RCxPQUFRUDtRQUNOLEtBQUs7WUFDSCxNQUFNYyxVQUFVLE1BQU1sQixnREFBUUEsQ0FBQ0s7WUFDL0IsT0FBT2EsUUFBUUMsSUFBSTtRQUNyQixLQUFLO1lBQ0gsTUFBTUMsYUFBYSxNQUFNckIsNkRBQXNCLENBQUM7Z0JBQUV1QixNQUFNbkI7WUFBUztZQUNqRSxPQUFPaUIsV0FBV0csS0FBSztRQUN6QixLQUFLO1FBQ0wsS0FBSztRQUNMLEtBQUs7WUFDSCxNQUFNQyxPQUFPbkIsT0FBT29CLFFBQVE7WUFDNUIsT0FBT3hCLDBFQUEwQixDQUFDdUI7UUFDcEMsS0FBSztZQUNILE9BQU9uQixPQUFPb0IsUUFBUTtRQUN4QjtZQUNFLE1BQU0sSUFBSUUsTUFBTSx5QkFBeUI7SUFDN0M7QUFDRixDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZmlsZS1xLWFuZC1hLy4vc3JjL3NlcnZpY2VzL2V4dHJhY3RUZXh0RnJvbUZpbGUudHM/OTI3YSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZnMgZnJvbSBcImZzXCI7XG5pbXBvcnQgbWFtbW90aCBmcm9tIFwibWFtbW90aFwiO1xuaW1wb3J0IHBkZlBhcnNlIGZyb20gXCJwZGYtcGFyc2VcIjtcbmltcG9ydCB7IE5vZGVIdG1sTWFya2Rvd24gfSBmcm9tIFwibm9kZS1odG1sLW1hcmtkb3duXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGFzeW5jIGZ1bmN0aW9uIGV4dHJhY3RUZXh0RnJvbUZpbGUoe1xuICBmaWxlcGF0aCxcbiAgZmlsZXR5cGUsXG59OiB7XG4gIGZpbGVwYXRoOiBzdHJpbmc7XG4gIGZpbGV0eXBlOiBzdHJpbmc7XG59KTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgY29uc3QgYnVmZmVyOiBCdWZmZXIgPSBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgY29uc3QgZmlsZVN0cmVhbSA9IGZzLmNyZWF0ZVJlYWRTdHJlYW0oZmlsZXBhdGgpO1xuICAgIGNvbnN0IGNodW5rczogYW55W10gPSBbXTtcbiAgICBmaWxlU3RyZWFtLm9uKFwiZGF0YVwiLCAoY2h1bmspID0+IHtcbiAgICAgIGNodW5rcy5wdXNoKGNodW5rKTtcbiAgICB9KTtcbiAgICBmaWxlU3RyZWFtLm9uKFwiZXJyb3JcIiwgKGVycm9yKSA9PiB7XG4gICAgICByZWplY3QoZXJyb3IpO1xuICAgIH0pO1xuICAgIGZpbGVTdHJlYW0ub24oXCJlbmRcIiwgKCkgPT4ge1xuICAgICAgcmVzb2x2ZShCdWZmZXIuY29uY2F0KGNodW5rcykpO1xuICAgIH0pO1xuICB9KTtcblxuICAvLyBIYW5kbGUgZGlmZmVyZW50IGZpbGUgdHlwZXMgdXNpbmcgZGlmZmVyZW50IG1vZHVsZXNcbiAgc3dpdGNoIChmaWxldHlwZSkge1xuICAgIGNhc2UgXCJhcHBsaWNhdGlvbi9wZGZcIjpcbiAgICAgIGNvbnN0IHBkZkRhdGEgPSBhd2FpdCBwZGZQYXJzZShidWZmZXIpO1xuICAgICAgcmV0dXJuIHBkZkRhdGEudGV4dDtcbiAgICBjYXNlIFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LndvcmRwcm9jZXNzaW5nbWwuZG9jdW1lbnRcIjogLy8gaS5lLiBkb2N4IGZpbGVcbiAgICAgIGNvbnN0IGRvY3hSZXN1bHQgPSBhd2FpdCBtYW1tb3RoLmV4dHJhY3RSYXdUZXh0KHsgcGF0aDogZmlsZXBhdGggfSk7XG4gICAgICByZXR1cm4gZG9jeFJlc3VsdC52YWx1ZTtcbiAgICBjYXNlIFwidGV4dC9tYXJrZG93blwiOlxuICAgIGNhc2UgXCJ0ZXh0L2NzdlwiOlxuICAgIGNhc2UgXCJ0ZXh0L2h0bWxcIjpcbiAgICAgIGNvbnN0IGh0bWwgPSBidWZmZXIudG9TdHJpbmcoKTtcbiAgICAgIHJldHVybiBOb2RlSHRtbE1hcmtkb3duLnRyYW5zbGF0ZShodG1sKTtcbiAgICBjYXNlIFwidGV4dC9wbGFpblwiOlxuICAgICAgcmV0dXJuIGJ1ZmZlci50b1N0cmluZygpO1xuICAgIGRlZmF1bHQ6XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbnN1cHBvcnRlZCBmaWxlIHR5cGVcIik7XG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJmcyIsIm1hbW1vdGgiLCJwZGZQYXJzZSIsIk5vZGVIdG1sTWFya2Rvd24iLCJleHRyYWN0VGV4dEZyb21GaWxlIiwiZmlsZXBhdGgiLCJmaWxldHlwZSIsImJ1ZmZlciIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiZmlsZVN0cmVhbSIsImNyZWF0ZVJlYWRTdHJlYW0iLCJjaHVua3MiLCJvbiIsImNodW5rIiwicHVzaCIsImVycm9yIiwiQnVmZmVyIiwiY29uY2F0IiwicGRmRGF0YSIsInRleHQiLCJkb2N4UmVzdWx0IiwiZXh0cmFjdFJhd1RleHQiLCJwYXRoIiwidmFsdWUiLCJodG1sIiwidG9TdHJpbmciLCJ0cmFuc2xhdGUiLCJFcnJvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./src/services/extractTextFromFile.ts\n");

/***/ }),

/***/ "(api)/./src/services/getEmbeddingsForText.ts":
/*!**********************************************!*\
  !*** ./src/services/getEmbeddingsForText.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"getEmbeddingsForText\": () => (/* binding */ getEmbeddingsForText)\n/* harmony export */ });\n/* harmony import */ var _chunkText__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunkText */ \"(api)/./src/services/chunkText.ts\");\n/* harmony import */ var _openai__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./openai */ \"(api)/./src/services/openai.ts\");\n\n\n// There isn't a good JS tokenizer at the moment, so we are using this approximation of 4 characters per token instead. This might break for some languages.\nconst MAX_CHAR_LENGTH = 250 * 4;\n// This function takes a text and returns an array of embeddings for each chunk of the text\n// The text is split into chunks of a given maximum charcter length\n// The embeddings are computed in batches of a given size\nasync function getEmbeddingsForText({ text , maxCharLength =MAX_CHAR_LENGTH , batchSize =20  }) {\n    const textChunks = (0,_chunkText__WEBPACK_IMPORTED_MODULE_0__.chunkText)({\n        text,\n        maxCharLength\n    });\n    const batches = [];\n    for(let i = 0; i < textChunks.length; i += batchSize){\n        batches.push(textChunks.slice(i, i + batchSize));\n    }\n    try {\n        const batchPromises = batches.map((batch)=>(0,_openai__WEBPACK_IMPORTED_MODULE_1__.embedding)({\n                input: batch\n            }));\n        const embeddings = (await Promise.all(batchPromises)).flat();\n        const textEmbeddings = embeddings.map((embedding, index)=>({\n                embedding,\n                text: textChunks[index]\n            }));\n        return textEmbeddings;\n    } catch (error) {\n        console.log(\"Error: \", error);\n        return [];\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9zcmMvc2VydmljZXMvZ2V0RW1iZWRkaW5nc0ZvclRleHQudHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQ3dDO0FBQ0g7QUFFckMsNEpBQTRKO0FBQzVKLE1BQU1FLGtCQUFrQixNQUFNO0FBRTlCLDJGQUEyRjtBQUMzRixtRUFBbUU7QUFDbkUseURBQXlEO0FBQ2xELGVBQWVDLHFCQUFxQixFQUN6Q0MsS0FBSSxFQUNKQyxlQUFnQkgsZ0JBQWUsRUFDL0JJLFdBQVksR0FBRSxFQUtmLEVBQTRCO0lBQzNCLE1BQU1DLGFBQWFQLHFEQUFTQSxDQUFDO1FBQUVJO1FBQU1DO0lBQWM7SUFFbkQsTUFBTUcsVUFBVSxFQUFFO0lBQ2xCLElBQUssSUFBSUMsSUFBSSxHQUFHQSxJQUFJRixXQUFXRyxNQUFNLEVBQUVELEtBQUtILFVBQVc7UUFDckRFLFFBQVFHLElBQUksQ0FBQ0osV0FBV0ssS0FBSyxDQUFDSCxHQUFHQSxJQUFJSDtJQUN2QztJQUVBLElBQUk7UUFDRixNQUFNTyxnQkFBZ0JMLFFBQVFNLEdBQUcsQ0FBQyxDQUFDQyxRQUFVZCxrREFBU0EsQ0FBQztnQkFBRWUsT0FBT0Q7WUFBTTtRQUV0RSxNQUFNRSxhQUFhLENBQUMsTUFBTUMsUUFBUUMsR0FBRyxDQUFDTixjQUFhLEVBQUdPLElBQUk7UUFFMUQsTUFBTUMsaUJBQWlCSixXQUFXSCxHQUFHLENBQUMsQ0FBQ2IsV0FBV3FCLFFBQVc7Z0JBQzNEckI7Z0JBQ0FHLE1BQU1HLFVBQVUsQ0FBQ2UsTUFBTTtZQUN6QjtRQUVBLE9BQU9EO0lBQ1QsRUFBRSxPQUFPRSxPQUFZO1FBQ25CQyxRQUFRQyxHQUFHLENBQUMsV0FBV0Y7UUFDdkIsT0FBTyxFQUFFO0lBQ1g7QUFDRixDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZmlsZS1xLWFuZC1hLy4vc3JjL3NlcnZpY2VzL2dldEVtYmVkZGluZ3NGb3JUZXh0LnRzPzgzZjciXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVGV4dEVtYmVkZGluZyB9IGZyb20gXCIuLi90eXBlcy9maWxlXCI7XG5pbXBvcnQgeyBjaHVua1RleHQgfSBmcm9tIFwiLi9jaHVua1RleHRcIjtcbmltcG9ydCB7IGVtYmVkZGluZyB9IGZyb20gXCIuL29wZW5haVwiO1xuXG4vLyBUaGVyZSBpc24ndCBhIGdvb2QgSlMgdG9rZW5pemVyIGF0IHRoZSBtb21lbnQsIHNvIHdlIGFyZSB1c2luZyB0aGlzIGFwcHJveGltYXRpb24gb2YgNCBjaGFyYWN0ZXJzIHBlciB0b2tlbiBpbnN0ZWFkLiBUaGlzIG1pZ2h0IGJyZWFrIGZvciBzb21lIGxhbmd1YWdlcy5cbmNvbnN0IE1BWF9DSEFSX0xFTkdUSCA9IDI1MCAqIDQ7XG5cbi8vIFRoaXMgZnVuY3Rpb24gdGFrZXMgYSB0ZXh0IGFuZCByZXR1cm5zIGFuIGFycmF5IG9mIGVtYmVkZGluZ3MgZm9yIGVhY2ggY2h1bmsgb2YgdGhlIHRleHRcbi8vIFRoZSB0ZXh0IGlzIHNwbGl0IGludG8gY2h1bmtzIG9mIGEgZ2l2ZW4gbWF4aW11bSBjaGFyY3RlciBsZW5ndGhcbi8vIFRoZSBlbWJlZGRpbmdzIGFyZSBjb21wdXRlZCBpbiBiYXRjaGVzIG9mIGEgZ2l2ZW4gc2l6ZVxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldEVtYmVkZGluZ3NGb3JUZXh0KHtcbiAgdGV4dCxcbiAgbWF4Q2hhckxlbmd0aCA9IE1BWF9DSEFSX0xFTkdUSCxcbiAgYmF0Y2hTaXplID0gMjAsXG59OiB7XG4gIHRleHQ6IHN0cmluZztcbiAgbWF4Q2hhckxlbmd0aD86IG51bWJlcjtcbiAgYmF0Y2hTaXplPzogbnVtYmVyO1xufSk6IFByb21pc2U8VGV4dEVtYmVkZGluZ1tdPiB7XG4gIGNvbnN0IHRleHRDaHVua3MgPSBjaHVua1RleHQoeyB0ZXh0LCBtYXhDaGFyTGVuZ3RoIH0pO1xuXG4gIGNvbnN0IGJhdGNoZXMgPSBbXTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCB0ZXh0Q2h1bmtzLmxlbmd0aDsgaSArPSBiYXRjaFNpemUpIHtcbiAgICBiYXRjaGVzLnB1c2godGV4dENodW5rcy5zbGljZShpLCBpICsgYmF0Y2hTaXplKSk7XG4gIH1cblxuICB0cnkge1xuICAgIGNvbnN0IGJhdGNoUHJvbWlzZXMgPSBiYXRjaGVzLm1hcCgoYmF0Y2gpID0+IGVtYmVkZGluZyh7IGlucHV0OiBiYXRjaCB9KSk7XG5cbiAgICBjb25zdCBlbWJlZGRpbmdzID0gKGF3YWl0IFByb21pc2UuYWxsKGJhdGNoUHJvbWlzZXMpKS5mbGF0KCk7XG5cbiAgICBjb25zdCB0ZXh0RW1iZWRkaW5ncyA9IGVtYmVkZGluZ3MubWFwKChlbWJlZGRpbmcsIGluZGV4KSA9PiAoe1xuICAgICAgZW1iZWRkaW5nLFxuICAgICAgdGV4dDogdGV4dENodW5rc1tpbmRleF0sXG4gICAgfSkpO1xuXG4gICAgcmV0dXJuIHRleHRFbWJlZGRpbmdzO1xuICB9IGNhdGNoIChlcnJvcjogYW55KSB7XG4gICAgY29uc29sZS5sb2coXCJFcnJvcjogXCIsIGVycm9yKTtcbiAgICByZXR1cm4gW107XG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJjaHVua1RleHQiLCJlbWJlZGRpbmciLCJNQVhfQ0hBUl9MRU5HVEgiLCJnZXRFbWJlZGRpbmdzRm9yVGV4dCIsInRleHQiLCJtYXhDaGFyTGVuZ3RoIiwiYmF0Y2hTaXplIiwidGV4dENodW5rcyIsImJhdGNoZXMiLCJpIiwibGVuZ3RoIiwicHVzaCIsInNsaWNlIiwiYmF0Y2hQcm9taXNlcyIsIm1hcCIsImJhdGNoIiwiaW5wdXQiLCJlbWJlZGRpbmdzIiwiUHJvbWlzZSIsImFsbCIsImZsYXQiLCJ0ZXh0RW1iZWRkaW5ncyIsImluZGV4IiwiZXJyb3IiLCJjb25zb2xlIiwibG9nIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api)/./src/services/getEmbeddingsForText.ts\n");

/***/ }),

/***/ "(api)/./src/services/openai.ts":
/*!********************************!*\
  !*** ./src/services/openai.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"completion\": () => (/* binding */ completion),\n/* harmony export */   \"completionStream\": () => (/* binding */ completionStream),\n/* harmony export */   \"embedding\": () => (/* binding */ embedding),\n/* harmony export */   \"openai\": () => (/* binding */ openai)\n/* harmony export */ });\n/* harmony import */ var openai__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! openai */ \"openai\");\n/* harmony import */ var openai__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(openai__WEBPACK_IMPORTED_MODULE_0__);\n\n// This file contains utility functions for interacting with the OpenAI API\nif (!process.env.OPENAI_API_KEY) {\n    throw new Error(\"Missing OPENAI_API_KEY environment variable\");\n}\nconst configuration = new openai__WEBPACK_IMPORTED_MODULE_0__.Configuration({\n    apiKey: process.env.OPENAI_API_KEY\n});\nconst openai = new openai__WEBPACK_IMPORTED_MODULE_0__.OpenAIApi(configuration);\nasync function completion({ prompt , fallback , max_tokens =800 , temperature =0 , model =\"text-davinci-003\" , ...otherOptions }) {\n    try {\n        const result = await openai.createCompletion({\n            prompt,\n            max_tokens,\n            temperature,\n            model,\n            ...otherOptions\n        });\n        if (!result.data.choices[0].text) {\n            throw new Error(\"No text returned from the completions endpoint.\");\n        }\n        return result.data.choices[0].text;\n    } catch (error) {\n        if (fallback) return fallback;\n        else throw error;\n    }\n}\nasync function* completionStream({ prompt , fallback , max_tokens =800 , temperature =0 , model =\"text-davinci-003\"  }) {\n    try {\n        const result = await openai.createCompletion({\n            prompt,\n            max_tokens,\n            temperature,\n            model,\n            stream: true\n        }, {\n            responseType: \"stream\"\n        });\n        const stream = result.data;\n        for await (const chunk of stream){\n            const line = chunk.toString().trim();\n            const message = line.split(\"data: \")[1];\n            if (message === \"[DONE]\") {\n                break;\n            }\n            const data = JSON.parse(message);\n            yield data.choices[0].text;\n        }\n    } catch (error) {\n        if (fallback) yield fallback;\n        else throw error;\n    }\n}\nasync function embedding({ input , model =\"text-embedding-ada-002\"  }) {\n    const result = await openai.createEmbedding({\n        model,\n        input\n    });\n    if (!result.data.data[0].embedding) {\n        throw new Error(\"No embedding returned from the completions endpoint\");\n    }\n    // Otherwise, return the embeddings\n    return result.data.data.map((d)=>d.embedding);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9zcmMvc2VydmljZXMvb3BlbmFpLnRzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQU1nQjtBQUVoQiwyRUFBMkU7QUFFM0UsSUFBSSxDQUFDRSxRQUFRQyxHQUFHLENBQUNDLGNBQWMsRUFBRTtJQUMvQixNQUFNLElBQUlDLE1BQU0sK0NBQStDO0FBQ2pFLENBQUM7QUFFRCxNQUFNQyxnQkFBZ0IsSUFBSU4saURBQWFBLENBQUM7SUFDdENPLFFBQVFMLFFBQVFDLEdBQUcsQ0FBQ0MsY0FBYztBQUNwQztBQUNPLE1BQU1JLFNBQVMsSUFBSVAsNkNBQVNBLENBQUNLLGVBQWU7QUFZNUMsZUFBZUcsV0FBVyxFQUMvQkMsT0FBTSxFQUNOQyxTQUFRLEVBQ1JDLFlBQWEsSUFBRyxFQUNoQkMsYUFBYyxFQUFDLEVBQ2ZDLE9BQVEsbUJBQWtCLEVBQzFCLEdBQUdDLGNBQ2UsRUFBRTtJQUNwQixJQUFJO1FBQ0YsTUFBTUMsU0FBUyxNQUFNUixPQUFPUyxnQkFBZ0IsQ0FBQztZQUMzQ1A7WUFDQUU7WUFDQUM7WUFDQUM7WUFDQSxHQUFHQyxZQUFZO1FBQ2pCO1FBRUEsSUFBSSxDQUFDQyxPQUFPRSxJQUFJLENBQUNDLE9BQU8sQ0FBQyxFQUFFLENBQUNDLElBQUksRUFBRTtZQUNoQyxNQUFNLElBQUlmLE1BQU0sbURBQW1EO1FBQ3JFLENBQUM7UUFDRCxPQUFPVyxPQUFPRSxJQUFJLENBQUNDLE9BQU8sQ0FBQyxFQUFFLENBQUNDLElBQUk7SUFDcEMsRUFBRSxPQUFPQyxPQUFPO1FBQ2QsSUFBSVYsVUFBVSxPQUFPQTthQUNoQixNQUFNVSxNQUFNO0lBQ25CO0FBQ0YsQ0FBQztBQUVNLGdCQUFnQkMsaUJBQWlCLEVBQ3RDWixPQUFNLEVBQ05DLFNBQVEsRUFDUkMsWUFBYSxJQUFHLEVBQ2hCQyxhQUFjLEVBQUMsRUFDZkMsT0FBUSxtQkFBa0IsRUFDUixFQUFFO0lBQ3BCLElBQUk7UUFDRixNQUFNRSxTQUFTLE1BQU1SLE9BQU9TLGdCQUFnQixDQUMxQztZQUNFUDtZQUNBRTtZQUNBQztZQUNBQztZQUNBUyxRQUFRLElBQUk7UUFDZCxHQUNBO1lBQUVDLGNBQWM7UUFBUztRQUczQixNQUFNRCxTQUFTUCxPQUFPRSxJQUFJO1FBRTFCLFdBQVcsTUFBTU8sU0FBU0YsT0FBUTtZQUNoQyxNQUFNRyxPQUFPRCxNQUFNRSxRQUFRLEdBQUdDLElBQUk7WUFDbEMsTUFBTUMsVUFBVUgsS0FBS0ksS0FBSyxDQUFDLFNBQVMsQ0FBQyxFQUFFO1lBRXZDLElBQUlELFlBQVksVUFBVTtnQkFDeEIsS0FBTTtZQUNSLENBQUM7WUFFRCxNQUFNWCxPQUFPYSxLQUFLQyxLQUFLLENBQUNIO1lBRXhCLE1BQU1YLEtBQUtDLE9BQU8sQ0FBQyxFQUFFLENBQUNDLElBQUk7UUFDNUI7SUFDRixFQUFFLE9BQU9DLE9BQU87UUFDZCxJQUFJVixVQUFVLE1BQU1BO2FBQ2YsTUFBTVUsTUFBTTtJQUNuQjtBQUNGLENBQUM7QUFFTSxlQUFlWSxVQUFVLEVBQzlCQyxNQUFLLEVBQ0xwQixPQUFRLHlCQUF3QixFQUNmLEVBQXVCO0lBQ3hDLE1BQU1FLFNBQVMsTUFBTVIsT0FBTzJCLGVBQWUsQ0FBQztRQUMxQ3JCO1FBQ0FvQjtJQUNGO0lBRUEsSUFBSSxDQUFDbEIsT0FBT0UsSUFBSSxDQUFDQSxJQUFJLENBQUMsRUFBRSxDQUFDZSxTQUFTLEVBQUU7UUFDbEMsTUFBTSxJQUFJNUIsTUFBTSx1REFBdUQ7SUFDekUsQ0FBQztJQUVELG1DQUFtQztJQUNuQyxPQUFPVyxPQUFPRSxJQUFJLENBQUNBLElBQUksQ0FBQ2tCLEdBQUcsQ0FBQyxDQUFDQyxJQUFNQSxFQUFFSixTQUFTO0FBQ2hELENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9maWxlLXEtYW5kLWEvLi9zcmMvc2VydmljZXMvb3BlbmFpLnRzPzNjNmMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5jb21pbmdNZXNzYWdlIH0gZnJvbSBcImh0dHBcIjtcbmltcG9ydCB7XG4gIENvbmZpZ3VyYXRpb24sXG4gIENyZWF0ZUNvbXBsZXRpb25SZXF1ZXN0LFxuICBDcmVhdGVDb21wbGV0aW9uUmVzcG9uc2UsXG4gIE9wZW5BSUFwaSxcbn0gZnJvbSBcIm9wZW5haVwiO1xuXG4vLyBUaGlzIGZpbGUgY29udGFpbnMgdXRpbGl0eSBmdW5jdGlvbnMgZm9yIGludGVyYWN0aW5nIHdpdGggdGhlIE9wZW5BSSBBUElcblxuaWYgKCFwcm9jZXNzLmVudi5PUEVOQUlfQVBJX0tFWSkge1xuICB0aHJvdyBuZXcgRXJyb3IoXCJNaXNzaW5nIE9QRU5BSV9BUElfS0VZIGVudmlyb25tZW50IHZhcmlhYmxlXCIpO1xufVxuXG5jb25zdCBjb25maWd1cmF0aW9uID0gbmV3IENvbmZpZ3VyYXRpb24oe1xuICBhcGlLZXk6IHByb2Nlc3MuZW52Lk9QRU5BSV9BUElfS0VZLFxufSk7XG5leHBvcnQgY29uc3Qgb3BlbmFpID0gbmV3IE9wZW5BSUFwaShjb25maWd1cmF0aW9uKTtcblxudHlwZSBDb21wbGV0aW9uT3B0aW9ucyA9IFBhcnRpYWw8Q3JlYXRlQ29tcGxldGlvblJlcXVlc3Q+ICYge1xuICBwcm9tcHQ6IHN0cmluZztcbiAgZmFsbGJhY2s/OiBzdHJpbmc7XG59O1xuXG50eXBlIEVtYmVkZGluZ09wdGlvbnMgPSB7XG4gIGlucHV0OiBzdHJpbmcgfCBzdHJpbmdbXTtcbiAgbW9kZWw/OiBzdHJpbmc7XG59O1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY29tcGxldGlvbih7XG4gIHByb21wdCxcbiAgZmFsbGJhY2ssXG4gIG1heF90b2tlbnMgPSA4MDAsXG4gIHRlbXBlcmF0dXJlID0gMCxcbiAgbW9kZWwgPSBcInRleHQtZGF2aW5jaS0wMDNcIixcbiAgLi4ub3RoZXJPcHRpb25zXG59OiBDb21wbGV0aW9uT3B0aW9ucykge1xuICB0cnkge1xuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IG9wZW5haS5jcmVhdGVDb21wbGV0aW9uKHtcbiAgICAgIHByb21wdCxcbiAgICAgIG1heF90b2tlbnMsXG4gICAgICB0ZW1wZXJhdHVyZSxcbiAgICAgIG1vZGVsLFxuICAgICAgLi4ub3RoZXJPcHRpb25zLFxuICAgIH0pO1xuXG4gICAgaWYgKCFyZXN1bHQuZGF0YS5jaG9pY2VzWzBdLnRleHQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIk5vIHRleHQgcmV0dXJuZWQgZnJvbSB0aGUgY29tcGxldGlvbnMgZW5kcG9pbnQuXCIpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0LmRhdGEuY2hvaWNlc1swXS50ZXh0O1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGlmIChmYWxsYmFjaykgcmV0dXJuIGZhbGxiYWNrO1xuICAgIGVsc2UgdGhyb3cgZXJyb3I7XG4gIH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uKiBjb21wbGV0aW9uU3RyZWFtKHtcbiAgcHJvbXB0LFxuICBmYWxsYmFjayxcbiAgbWF4X3Rva2VucyA9IDgwMCxcbiAgdGVtcGVyYXR1cmUgPSAwLFxuICBtb2RlbCA9IFwidGV4dC1kYXZpbmNpLTAwM1wiLFxufTogQ29tcGxldGlvbk9wdGlvbnMpIHtcbiAgdHJ5IHtcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBvcGVuYWkuY3JlYXRlQ29tcGxldGlvbihcbiAgICAgIHtcbiAgICAgICAgcHJvbXB0LFxuICAgICAgICBtYXhfdG9rZW5zLFxuICAgICAgICB0ZW1wZXJhdHVyZSxcbiAgICAgICAgbW9kZWwsXG4gICAgICAgIHN0cmVhbTogdHJ1ZSxcbiAgICAgIH0sXG4gICAgICB7IHJlc3BvbnNlVHlwZTogXCJzdHJlYW1cIiB9XG4gICAgKTtcblxuICAgIGNvbnN0IHN0cmVhbSA9IHJlc3VsdC5kYXRhIGFzIGFueSBhcyBJbmNvbWluZ01lc3NhZ2U7XG5cbiAgICBmb3IgYXdhaXQgKGNvbnN0IGNodW5rIG9mIHN0cmVhbSkge1xuICAgICAgY29uc3QgbGluZSA9IGNodW5rLnRvU3RyaW5nKCkudHJpbSgpO1xuICAgICAgY29uc3QgbWVzc2FnZSA9IGxpbmUuc3BsaXQoXCJkYXRhOiBcIilbMV07XG5cbiAgICAgIGlmIChtZXNzYWdlID09PSBcIltET05FXVwiKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBkYXRhID0gSlNPTi5wYXJzZShtZXNzYWdlKSBhcyBDcmVhdGVDb21wbGV0aW9uUmVzcG9uc2U7XG5cbiAgICAgIHlpZWxkIGRhdGEuY2hvaWNlc1swXS50ZXh0O1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBpZiAoZmFsbGJhY2spIHlpZWxkIGZhbGxiYWNrO1xuICAgIGVsc2UgdGhyb3cgZXJyb3I7XG4gIH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGVtYmVkZGluZyh7XG4gIGlucHV0LFxuICBtb2RlbCA9IFwidGV4dC1lbWJlZGRpbmctYWRhLTAwMlwiLFxufTogRW1iZWRkaW5nT3B0aW9ucyk6IFByb21pc2U8bnVtYmVyW11bXT4ge1xuICBjb25zdCByZXN1bHQgPSBhd2FpdCBvcGVuYWkuY3JlYXRlRW1iZWRkaW5nKHtcbiAgICBtb2RlbCxcbiAgICBpbnB1dCxcbiAgfSk7XG5cbiAgaWYgKCFyZXN1bHQuZGF0YS5kYXRhWzBdLmVtYmVkZGluZykge1xuICAgIHRocm93IG5ldyBFcnJvcihcIk5vIGVtYmVkZGluZyByZXR1cm5lZCBmcm9tIHRoZSBjb21wbGV0aW9ucyBlbmRwb2ludFwiKTtcbiAgfVxuXG4gIC8vIE90aGVyd2lzZSwgcmV0dXJuIHRoZSBlbWJlZGRpbmdzXG4gIHJldHVybiByZXN1bHQuZGF0YS5kYXRhLm1hcCgoZCkgPT4gZC5lbWJlZGRpbmcpO1xufVxuIl0sIm5hbWVzIjpbIkNvbmZpZ3VyYXRpb24iLCJPcGVuQUlBcGkiLCJwcm9jZXNzIiwiZW52IiwiT1BFTkFJX0FQSV9LRVkiLCJFcnJvciIsImNvbmZpZ3VyYXRpb24iLCJhcGlLZXkiLCJvcGVuYWkiLCJjb21wbGV0aW9uIiwicHJvbXB0IiwiZmFsbGJhY2siLCJtYXhfdG9rZW5zIiwidGVtcGVyYXR1cmUiLCJtb2RlbCIsIm90aGVyT3B0aW9ucyIsInJlc3VsdCIsImNyZWF0ZUNvbXBsZXRpb24iLCJkYXRhIiwiY2hvaWNlcyIsInRleHQiLCJlcnJvciIsImNvbXBsZXRpb25TdHJlYW0iLCJzdHJlYW0iLCJyZXNwb25zZVR5cGUiLCJjaHVuayIsImxpbmUiLCJ0b1N0cmluZyIsInRyaW0iLCJtZXNzYWdlIiwic3BsaXQiLCJKU09OIiwicGFyc2UiLCJlbWJlZGRpbmciLCJpbnB1dCIsImNyZWF0ZUVtYmVkZGluZyIsIm1hcCIsImQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/./src/services/openai.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = (__webpack_exec__("(api)/./src/pages/api/process-file.ts"));
module.exports = __webpack_exports__;

})();